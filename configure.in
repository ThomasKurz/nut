dnl +------------------------------------------------------------------+
dnl | Network UPS Tools: configure.in                                  |
dnl +------------------------------------------------------------------+

dnl NUT version number is defined here and *only* here (no more include/version)
AC_INIT(nut, 2.1.0)
AC_CONFIG_SRCDIR(server/upsd.c)
AC_CANONICAL_SYSTEM
AC_CONFIG_HEADER(include/config.h)
AC_PREFIX_DEFAULT(/usr/local/ups)
AM_INIT_AUTOMAKE

AC_DEFINE_UNQUOTED(UPS_VERSION, "${PACKAGE_VERSION}", [NUT version])

dnl Fix this early so we can expand with eval later
test "${prefix}" = "NONE" && prefix="${ac_default_prefix}"
test "${exec_prefix}" = "NONE" && exec_prefix='${prefix}'

CFLAGS=${CFLAGS-"-O"}

dnl +------------------------------------------------------------------+
dnl | default values for things later on (can be overridden)           |

STATEPATH="/var/state/ups"

DRVPATH='${exec_prefix}/bin'
CGIPATH='${exec_prefix}/cgi-bin'
HTMLPATH='${prefix}/html'

RUN_AS_USER="nobody"
PIDPATH="/var/run"

dnl Define directory where LIBOBJS replacement functions are
AC_CONFIG_LIBOBJ_DIR([common])

dnl These are only used if gdlib-config is unusable and the user
dnl fails to pass better values in --with arguments

LIBGD_CFLAGS=""
LIBGD_LDFLAGS="-L/usr/X11R6/lib -lgd -lpng -lz -ljpeg -lfreetype -lm -lXpm -lX11"

dnl +-------------------------------------------------------------------

AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_EGREP
AC_PATH_PROG(AR, ar)
AC_CHECK_TOOL(RANLIB, ranlib, :)
AC_PROG_LIBTOOL
AC_C_INLINE
AC_CHECK_FUNCS(flock lockf fcvt fcvtl)
AC_CHECK_FUNCS(cfsetispeed tcsendbreak)
AC_CHECK_FUNCS(seteuid setsid getpassphrase)
AC_CHECK_FUNCS(on_exit)

dnl the following may add stuff to LIBOBJS
AC_CHECK_FUNCS(vsnprintf snprintf, ,
	[AC_LIBOBJ(snprintf)]
)
AC_REPLACE_FUNCS(setenv inet_aton strerror atexit)

dnl
dnl Only use these when compiling with gcc 
dnl
if ( test "${GCC}" = "yes" )
then
  CFLAGS="${CFLAGS} -Wall -Wsign-compare"
fi  

dnl Endianness handling, using default behavior
dnl eg defines WORDS_BIGENDIAN if BigEnd,
dnl nothing if LittleEnd, abort otherwise
AC_C_BIGENDIAN

dnl optind handling:
dnl need to check if unistd.h is enough, else try getopt.h, else need decls
AC_MSG_CHECKING(for getopt declarations)
AC_TRY_COMPILE(
  [#include <unistd.h>],
  [int i = optind;],
  nut_getopt_decl_in_unistd=yes,
  nut_getopt_decl_in_unistd=no)
if test "${nut_getopt_decl_in_unistd}" = "yes"; then
  AC_MSG_RESULT(in unistd.h)
else
  AC_CHECK_HEADER(getopt.h, [have_getopt_h=yes], [have_getopt_h=])
  if test "${have_getopt_h}" = "yes"; then
    AC_DEFINE(NEED_GETOPT_H, 1,
		[Define if getopt.h is needed])
    AC_MSG_RESULT(using getopt.h)
  else
    AC_DEFINE(NEED_GETOPT_DECLS, 1, 
		[Define to use explicit getopt declarations])
    AC_MSG_RESULT(using explicit getopt declarations)
  fi
fi

dnl FreeBSD serial locking compatibility - look for uu_lock in libutil.h

AC_MSG_CHECKING(whether to use uu_lock)
AC_EGREP_HEADER(uu_lock, libutil.h, [
		AC_MSG_RESULT(yes)
		SERLIBS="-lutil"
		AC_DEFINE(HAVE_UU_LOCK, 1, 
			[Use uu_lock for locking (FreeBSD)])  

		dnl put in some better defaults for FreeBSD
		RUN_AS_USER="uucp"
],[
		AC_MSG_RESULT(no)
		SERLIBS=""
])	

dnl Solaris compatibility - check for -lnsl and -lsocket if connect() is gone

AC_CHECK_FUNCS(connect)

if ( test "${ac_cv_func_connect}" = "no" ); then
	AC_CHECK_LIB(nsl, printf, [
	  	NETLIBS="-lnsl"
	], [], [])

	AC_CHECK_LIB(socket, printf, [
		NETLIBS="${NETLIBS} -lsocket"
	], [], [])
fi

AC_CHECK_HEADERS(sys/modem.h stdarg.h varargs.h sys/termios.h)

AC_HEADER_TIME
AC_CHECK_HEADERS(sys/time.h)

dnl Check for types and define possible replacements
TYPE_SOCKLEN_T
TYPE_UINT16_T
TYPE_UINT8_T

dnl ----------------------------------------------------------------------
dnl check for --with-all (or --without-all, or --with-all=auto) flag

AC_MSG_CHECKING(for --with-all)
AC_ARG_WITH(all,
AC_HELP_STRING([--with-all], [enable cgi, lib, serial, snmp, usb, hal]),
[	if test -n "${withval}"; then
		dnl Note: we allow "no" as a positive value, because
		dnl this is what the user expects from --without-all
		if test -z "${with_cgi}"; then with_cgi="${withval}"; fi
		if test -z "${with_lib}"; then with_lib="${withval}"; fi
		if test -z "${with_serial}"; then with_serial="${withval}"; fi
		if test -z "${with_snmp}"; then with_snmp="${withval}"; fi
		if test -z "${with_usb}"; then with_usb="${withval}"; fi
		if test -z "${with_hal}"; then with_hal="${withval}"; fi
		AC_MSG_RESULT("${withval}")		
	else
		AC_MSG_RESULT(not given)
	fi
], [		AC_MSG_RESULT(not given)
])

dnl ----------------------------------------------------------------------
dnl Check for --with-ssl

AC_ARG_WITH(ssl,
 AC_HELP_STRING([--with-ssl], [enable SSL development code (default: auto)]),
 [nut_with_ssl="${withval}"],
 [nut_with_ssl="auto"]
)
dnl ${nut_with_ssl}: any value except "yes" or "no" is treated as "auto". 

dnl ----------------------------------------------------------------------
dnl check for SSL compiler flags

if test "${nut_with_ssl}" != "no"; then

   AC_MSG_CHECKING(for SSL library availability)

   CFLAGS_ORIG="${CFLAGS}"
   LDFLAGS_ORIG="${LDFLAGS}"

   SSL_CFLAGS=""
   SSL_LDFLAGS="-lssl -lcrypto"

   CFLAGS="${SSL_CFLAGS}"
   LDFLAGS="${SSL_LDFLAGS}"
   AC_TRY_LINK([#include <openssl/ssl.h>], [SSL_library_init()], 
	       nut_have_ssl=yes, 
	       nut_have_ssl=no)

   if test "${nut_have_ssl}" != "yes"; then
      SSL_CFLAGS="-I/usr/local/ssl/include"
      SSL_LDFLAGS="-L/usr/local/ssl/lib -lssl -lcrypto"

      CFLAGS="${SSL_CFLAGS}"
      LDFLAGS="${SSL_LDFLAGS}"
      AC_TRY_LINK([#include <openssl/ssl.h>], [SSL_library_init], 
                  nut_have_ssl=yes, 
		  nut_have_ssl=no)
   fi

   if test "${nut_have_ssl}" != "yes"; then
      SSL_CFLAGS="-I/usr/local/ssl/include -I/usr/kerberos/include"
      SSL_LDFLAGS="-L/usr/local/ssl/lib -lssl -lcrypto"

      CFLAGS="${SSL_CFLAGS}"
      LDFLAGS="${SSL_LDFLAGS}"
      AC_TRY_LINK([#include <openssl/ssl.h>], [SSL_library_init], 
                   nut_have_ssl=yes, 
		   nut_have_ssl=no)
   fi

   CFLAGS="${CFLAGS_ORIG}"
   LDFLAGS="${LDFLAGS_ORIG}"

   AC_MSG_RESULT([${nut_have_ssl}])
fi

if test "${nut_with_ssl}" = "yes" -a "${nut_have_ssl}" != "yes"; then
   AC_MSG_ERROR(["OpenSSL not found, required for SSL support"])
fi

if test "${nut_with_ssl}" != "no"; then
   nut_with_ssl="${nut_have_ssl}"
fi

if test "${nut_with_ssl}" = "yes"; then
   AC_DEFINE(HAVE_SSL, 1, [Define to enable SSL development code])
fi
NUT_REPORT_FEATURE([enable SSL development code], [${nut_with_ssl}])

dnl ----------------------------------------------------------------------
dnl check with --with-cgi

AC_ARG_WITH(cgi,
 AC_HELP_STRING([--with-cgi], [build and install the CGI programs (default: no)]),
 [nut_with_cgi="${withval}"],
 [nut_with_cgi="no"]
)
dnl ${nut_with_cgi}: any value except "yes" or "no" is treated as "auto".

dnl ----------------------------------------------------------------------
dnl check for GD compiler flags

if test "${nut_with_cgi}" != "no"; then

   dnl See if gdlib-config is out there and usable

   AC_MSG_CHECKING(for gd version via gdlib-config)

   GD_VERSION=`gdlib-config --version 2>/dev/null`
   if (test "$?" != "0")
   then
	GD_VERSION="unknown"
	AC_MSG_RESULT(not found)
   else
	AC_MSG_RESULT(${GD_VERSION})
   fi

   case "${GD_VERSION}" in
	unknown)
		;;

	2.0.5 | 2.0.6 | 2.0.7)
		AC_MSG_WARN([[gd ${GD_VERSION} detected, unable to use gdlib-config script]])
		AC_MSG_WARN([[If gd detection fails, upgrade gd or use --with-gd-libs]])
		;;

	*)
		LIBGD_LDFLAGS="`gdlib-config --ldflags` `gdlib-config --libs` -lgd"
		LIBGD_CFLAGS="`gdlib-config --includes`"
		;;
	esac

   dnl Now allow overriding gd settings if the user knows best

   AC_MSG_CHECKING(for gd include flags)
   AC_ARG_WITH(gd-includes,
   AC_HELP_STRING([--with-gd-includes=FLAGS], [include flags for the gd library]),
   [	case "${withval}" in
	yes|no)
		;;
	*)
		LIBGD_CFLAGS="${withval}"
		;;
	esac],
   )
   AC_MSG_RESULT([${LIBGD_CFLAGS}])

   AC_MSG_CHECKING(for gd library flags)
   AC_ARG_WITH(gd-libs,
   AC_HELP_STRING([--with-gd-libs=FLAGS], [linker flags for the gd library]),
   [	case "${withval}" in
	yes|no)
		;;
	*)
		LIBGD_LDFLAGS="${withval}"
		;;
	esac],
   )
   AC_MSG_RESULT([${LIBGD_LDFLAGS}])

   dnl check if gd is usable

   CFLAGS_ORIG="${CFLAGS}"
   CPPFLAGS_ORIG="${CPPFLAGS}"
   LDFLAGS_ORIG="${LDFLAGS}"

		CFLAGS="${LIBGD_CFLAGS}"
		CPPFLAGS="${LIBGD_CFLAGS}"
		LDFLAGS="${LIBGD_LDFLAGS}"

		AC_CHECK_HEADERS(gd.h)
		AC_CHECK_LIB(gd, gdImagePng, 
		[ nut_have_libgd=yes
		  AC_DEFINE(HAVE_LIBGD, 1, 
			[Define if you have Boutell's libgd installed])
		],
                [ nut_have_libgd=no ],
		${LIBGD_LDFLAGS})

   dnl put back the original versions
   CFLAGS="${CFLAGS_ORIG}"
   CPPFLAGS="${CPPFLAGS_ORIG}"
   LDFLAGS="${LDFLAGS_ORIG}"

fi

if test "${nut_with_cgi}" = "yes" -a "${nut_have_libgd}" != "yes"; then
   AC_MSG_ERROR([libgd not found, required for CGI build])
fi

if test "${nut_with_cgi}" != "no"; then
   nut_with_cgi="${nut_have_libgd}"
fi

AM_CONDITIONAL(WITH_CGI, test "${nut_with_cgi}" = "yes")

NUT_REPORT_FEATURE([build CGI programs], [${nut_with_cgi}])

dnl ----------------------------------------------------------------------
dnl check with --with-lib

AC_ARG_WITH(lib,
 AC_HELP_STRING([--with-lib], [build and install the upsclient library (no)]),
 [nut_with_lib="${withval}"],
 [nut_with_lib="no"]
)
dnl ${nut_with_lib}: any value except "yes" or "no" is treated as "auto".
if test "${nut_with_lib}" != "no"; then
  nut_with_lib="yes"
fi
AM_CONDITIONAL(WITH_LIB, test "${nut_with_lib}" = "yes")
NUT_REPORT_FEATURE([build upsclient library], [${nut_with_lib}])

dnl ----------------------------------------------------------------------
dnl check for --with-serial

AC_ARG_WITH(serial,
 AC_HELP_STRING([--with-serial], [build and install serial drivers (yes)]),
 [nut_with_serial="${withval}"],
 [nut_with_serial="yes"]
)
dnl ${nut_with_serial}: any value except "yes" or "no" is treated as "auto". 
if test "${nut_with_serial}" != "no"; then
  nut_with_serial="yes"
fi
AM_CONDITIONAL(WITH_SERIAL, test "${nut_with_serial}" = "yes")
NUT_REPORT_FEATURE([build serial drivers], [${nut_with_serial}])

dnl ----------------------------------------------------------------------
dnl check for --with-snmp

AC_ARG_WITH(snmp,
 AC_HELP_STRING([--with-snmp], [build and install SNMP drivers (auto)]),
 [nut_with_snmp="${withval}"],
 [nut_with_snmp="auto"]
)
dnl ${nut_with_snmp}: any value except "yes" or "no" is treated as "auto". 

dnl ----------------------------------------------------------------------
dnl check for Net-SNMP libs and flags

if test "${nut_with_snmp}" != "no"; then

   dnl innocent until proven guilty
   nut_have_net_snmp=yes
   AC_MSG_CHECKING(for Net-SNMP cflags)
   NETSNMP_CFLAGS=`net-snmp-config --cflags 2>/dev/null`

   if (test "$?" != "0")
   then
	AC_MSG_RESULT([not found])
	nut_have_net_snmp=no
   else
	AC_MSG_RESULT([${NETSNMP_CFLAGS}])
   fi

   AC_MSG_CHECKING(for Net-SNMP libs)
   NETSNMP_LDFLAGS=`net-snmp-config --libs 2>/dev/null`

   if (test "$?" != "0")
   then
	AC_MSG_RESULT([not found])
	nut_have_net_snmp=no
   else
	AC_MSG_RESULT([${NETSNMP_LDFLAGS}])
   fi
fi

if test "${nut_with_snmp}" = "yes" -a "${nut_have_net_snmp}" != "yes"; then
   AC_MSG_ERROR(["Net-SNMP libraries not found, required for SNMP drivers"])
fi

if test "${nut_with_snmp}" != "no"; then
   nut_with_snmp="${nut_have_net_snmp}"
fi

AM_CONDITIONAL(WITH_SNMP, test "${nut_with_snmp}" = "yes")

NUT_REPORT_FEATURE([build SNMP drivers], [${nut_with_snmp}])

dnl ----------------------------------------------------------------------
dnl check for --with-usb

AC_ARG_WITH(usb,
 AC_HELP_STRING([--with-usb], [build and install USB drivers (auto)]),
 [nut_with_usb="${withval}"],
 [nut_with_usb="auto"]
)
dnl ${nut_with_usb}: any value except "yes" or "no" is treated as "auto". 

dnl ----------------------------------------------------------------------
dnl USB-related checks

if test "${nut_with_usb}" != "no"; then

   dnl innocent until proven guilty
   nut_have_libusb=yes

   dnl Check for libusb libs and flags
   AC_MSG_CHECKING(for libusb cflags)
   LIBUSB_CFLAGS=`libusb-config --cflags 2>/dev/null`
   if (test "$?" != "0")
   then
	AC_MSG_RESULT(not found)
	nut_have_libusb=no
   else
	AC_MSG_RESULT(${LIBUSB_CFLAGS})
   fi

   AC_MSG_CHECKING(for libusb libs)
   LIBUSB_LDFLAGS=`libusb-config --libs 2>/dev/null`
   if (test "$?" != "0")
   then
	AC_MSG_RESULT(not found)
	nut_have_libusb=no
   else
	AC_MSG_RESULT(${LIBUSB_LDFLAGS})
   fi

   dnl Check for libusb "force driver unbind" availability
   dnl Need at least libusb 0.1.8
   AC_CHECK_LIB(usb, usb_detach_kernel_driver_np, [
		AC_DEFINE(LIBUSB_HAS_DETACH_KRNL_DRV, 1,
			[Define to 1 if libusb supports `usb_detach_kernel_driver_np' function.])
	], [], [])

   dnl Check for Linux hiddev
   AC_MSG_CHECKING(for Linux hiddev.h)
   AC_ARG_WITH(linux-hiddev,
   AC_HELP_STRING([--with-linux-hiddev=FILE], [linux hiddev.h location (/usr/include/linux/hiddev.h)]),
   [	case "${withval}" in
	yes)
		linux_hiddev="/usr/include/linux/hiddev.h"
		;;
	no)
		linux_hiddev=
		;;
	*)
		linux_hiddev="${withval}"
		;;
	esac],
   [
	linux_hiddev="/usr/include/linux/hiddev.h"
   ]
   )

   if test -z "${linux_hiddev}"; then
        nut_have_hiddev=no
	AC_MSG_RESULT(no)
   elif test -f "${linux_hiddev}"; then
	AC_MSG_RESULT(${linux_hiddev})
        nut_have_hiddev=yes
	AC_DEFINE_UNQUOTED(LINUX_HIDDEV, "${linux_hiddev}", [Complete path for Linux hiddev.h])
   else
	AC_MSG_RESULT(${linux_hiddev} not found)
        nut_have_hiddev=no
	linux_hiddev=
   fi

   dnl Solaris 10/11 USB handling (need librt and libusb runtime path)
   case ${target_os} in
	solaris2.1* )
		echo Checking for Solaris 10 / 11 specific configuration for usb drivers
		AC_SEARCH_LIBS(nanosleep,rt)
		LIBUSB_LDFLAGS="-R/usr/sfw/lib ${LIBUSB_LDFLAGS}"
		dnl FIXME: Sun's libusb doesn't support timeout (so blocks notification)
		dnl and need to call libusb close upon reconnexion
		AC_DEFINE(SUN_LIBUSB, 1,
			[Define to 1 for Sun version of the libusb.])
		SUN_LIBUSB=1
		;;
   esac
fi

dnl If user requested USB drivers, insist on building all of them
if test "${nut_with_usb}" = "yes"; then
   if test "${nut_have_libusb}" != "yes" -a "${nut_have_hiddev}" != "yes"; then
      AC_MSG_ERROR([USB drivers requested but neither libusb nor hiddev.h found])
   elif test "${nut_have_libusb}" != "yes"; then
      AC_MSG_ERROR([USB drivers requested, but libusb not found. Use --with-usb=auto to build only available drivers.])
   elif test "${nut_have_hiddev}" != "yes"; then
      AC_MSG_ERROR([USB drivers requested, but hiddev not found. Use --with-usb=auto to build only available drivers.])
   fi
fi

AM_CONDITIONAL(WITH_LIBUSB, test "${nut_have_libusb}" = "yes")
AM_CONDITIONAL(WITH_HIDDEV, test "${nut_have_hiddev}" = "yes")

if test "${nut_with_usb}" != "no"; then
   if test "${nut_have_libusb}" = "yes" -a "${nut_have_hiddev}" = "yes"; then
      nut_usb_msg="yes"
   elif test "${nut_have_libusb}" = "yes"; then
      nut_usb_msg="libusb-based drivers only"
   elif test "${nut_have_hiddev}" = "yes"; then
      nut_usb_msg="hiddev-based drivers only"
   else
      nut_usb_msg="no"
   fi
else
   nut_usb_msg="no"
fi

NUT_REPORT_FEATURE([build USB drivers], [${nut_usb_msg}])

dnl ----------------------------------------------------------------------
dnl check for --with-hal

AC_ARG_WITH(hal,
 AC_HELP_STRING([--with-hal], [build and install HAL support (auto)]),
 [nut_with_hal="${withval}"],
 [nut_with_hal="auto"]
)
dnl ${nut_with_hal}: any value except "yes" or "no" is treated as "auto". 

dnl ----------------------------------------------------------------------
dnl Check for libhal libs and flags

if test "${nut_with_hal}" != "no"; then

   nut_have_libhal=yes
   AC_MSG_CHECKING(for libhal cflags)
	LIBHAL_CFLAGS=`pkg-config --silence-errors --cflags hal`
   if (test "$?" != "0")
   then
	AC_MSG_RESULT(not found)
	nut_have_libhal=no
   else
	AC_MSG_RESULT(${LIBHAL_CFLAGS})
   fi

   AC_MSG_CHECKING(for libhal libs)
   LIBHAL_LDFLAGS=`pkg-config --silence-errors --libs hal`
   if (test "$?" != "0")
   then
	AC_MSG_RESULT(not found)
	nut_have_libhal=no
   else
	AC_MSG_RESULT(${LIBHAL_LDFLAGS})
   fi

   dnl if this didn't work, try some standard places. For example,
   dnl HAL 0.5.8 and 0.5.8.1 contain pkg-config bugs.

   if test "${nut_have_libhal}" != "yes"; then

      dnl try again
      nut_have_libhal=yes

      CFLAGS_ORIG="${CFLAGS}"
      CPPFLAGS_ORIG="${CPPFLAGS}"
      LDFLAGS_ORIG="${LDFLAGS}"

      LIBHAL_CFLAGS="-DDBUS_API_SUBJECT_TO_CHANGE -I/usr/include/hal -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include"
      LIBHAL_LDFLAGS="-lhal -ldbus-1 -lpthread"
      
      CFLAGS="${LIBHAL_CFLAGS}"
      CPPFLAGS="${LIBHAL_CFLAGS}"
      LDFLAGS="${LIBHAL_LDFLAGS}"
      AC_CHECK_HEADER(libhal.h, , [nut_have_libhal=no])
      AC_CHECK_LIB(hal, libhal_ctx_init, [:], [nut_have_libhal=no])

      CFLAGS="${CFLAGS_ORIG}"
      CPPFLAGS="${CPPFLAGS_ORIG}"
      LDFLAGS="${LDFLAGS_ORIG}"
   fi
fi

if test "${nut_with_hal}" = "yes" -a "${nut_have_libhal}" != "yes"; then
   AC_MSG_ERROR(["libhal not found, required for HAL support"])
fi

if test "${nut_with_hal}" != "no"; then
   nut_with_hal="${nut_have_libhal}"
fi

AM_CONDITIONAL(WITH_HAL, test "${nut_with_hal}" = "yes")
NUT_REPORT_FEATURE([enable HAL support], [${nut_with_hal}])

dnl ----------------------------------------------------------------------

AC_MSG_CHECKING(state path)
AC_ARG_WITH(statepath,
AC_HELP_STRING([--with-statepath=PATH], [path for ups state files (/var/state/ups)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default: ${STATEPATH})
		AC_DEFINE_UNQUOTED(STATEPATH, "${STATEPATH}",
			[Path for UPS driver state files])
		;;
	*)
		AC_MSG_RESULT(${withval})
		AC_DEFINE_UNQUOTED(STATEPATH, "${withval}",
			[Path for UPS driver state files])
		STATEPATH="${withval}"
		;;
	esac],
	AC_MSG_RESULT(using default: ${STATEPATH})
	AC_DEFINE_UNQUOTED(STATEPATH, "${STATEPATH}",
		[Path for UPS driver state files])
)

dnl ---------------------------------------------------------------------
dnl The 'alt pid path' is used by the drivers (via main.c) and upsd, since
dnl ideally they do not run as root and won't be able to write to the usual
dnl /var/run path.  This defaults to the STATEPATH since they should be
dnl able to write there.
dnl

AC_MSG_CHECKING(alt pid path)
AC_ARG_WITH(altpidpath,
AC_HELP_STRING([--with-altpidpath=PATH], [path for driver/upsd .pid files (<statepath>)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default: ${STATEPATH})
		AC_DEFINE_UNQUOTED(ALTPIDPATH, "${STATEPATH}",
		[Path for pid files of drivers and upsd (usually STATEPATH)])

		ALTPIDPATH="${STATEPATH}"
		;;
	*)
		AC_MSG_RESULT(${withval})
		AC_DEFINE_UNQUOTED(ALTPIDPATH, "${withval}",
		[Path for pid files of drivers and upsd (usually STATEPATH)])
		ALTPIDPATH="${withval}"
		;;
	esac],
	AC_MSG_RESULT(using default: ${STATEPATH})
	AC_DEFINE_UNQUOTED(ALTPIDPATH, "${STATEPATH}",
		[Path for pid files of drivers and upsd (usually STATEPATH)])
	ALTPIDPATH="${STATEPATH}"
)

AC_MSG_CHECKING(driver path)
AC_ARG_WITH(drvpath,
AC_HELP_STRING([--with-drvpath=PATH], [where to install ups drivers (EPREFIX/bin)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default)
		conftemp="${DRVPATH}"
		eval conftemp=\"${conftemp}\"
		eval conftemp=\"${conftemp}\"
		AC_DEFINE_UNQUOTED(DRVPATH, "${conftemp}",
			[Default path for UPS drivers])
		;;
	*)
		AC_MSG_RESULT(${withval})
		conftemp="${withval}"
		eval conftemp=\"${conftemp}\"
		eval conftemp=\"${conftemp}\"
		AC_DEFINE_UNQUOTED(DRVPATH, "${conftemp}",
			[Default path for UPS drivers])
		DRVPATH="${withval}"
		;;
	esac],
	AC_MSG_RESULT(using default)
	conftemp="${DRVPATH}"
	eval conftemp=\"${conftemp}\"
	eval conftemp=\"${conftemp}\"
	AC_DEFINE_UNQUOTED(DRVPATH, "${conftemp}",
			[Default path for UPS drivers])
)

AC_MSG_CHECKING(cgi path)
AC_ARG_WITH(cgipath,
AC_HELP_STRING([--with-cgipath=PATH], [where to install CGI programs (EPREFIX/cgi-bin)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default)
		conftemp="${CGIPATH}"
		eval conftemp=\"${conftemp}\"
		eval conftemp=\"${conftemp}\"
		AC_DEFINE_UNQUOTED(CGIPATH, "${conftemp}",
			[Default path for CGI programs])
		;;
	*)
		AC_MSG_RESULT(${withval})
		conftemp="${withval}"
		eval conftemp=\"${conftemp}\"
		eval conftemp=\"${conftemp}\"
		AC_DEFINE_UNQUOTED(CGIPATH, "${conftemp}",
			[Default path for CGI programs])
		CGIPATH="${withval}"
		;;
	esac],
	AC_MSG_RESULT(using default)
	conftemp="${CGIPATH}"
	eval conftemp=\"${conftemp}\"
	eval conftemp=\"${conftemp}\"
	AC_DEFINE_UNQUOTED(CGIPATH, "${conftemp}",
			[Default path for CGI programs])
	)

AC_MSG_CHECKING(html path)
AC_ARG_WITH(htmlpath,
AC_HELP_STRING([--with-htmlpath=PATH], [where to install HTML files (PREFIX/html)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default)
		conftemp="${HTMLPATH}"
		eval conftemp=\"${conftemp}\"
		eval conftemp=\"${conftemp}\"
		AC_DEFINE_UNQUOTED(HTMLPATH, "${conftemp}",
			[Default path for HTML files])
		;;
	*)
		AC_MSG_RESULT(${withval})
		conftemp="${withval}"
		eval conftemp=\"${conftemp}\"
		eval conftemp=\"${conftemp}\"
		AC_DEFINE_UNQUOTED(HTMLPATH, "${conftemp}",
			[Default path for HTML files])
		HTMLPATH="${withval}"
		;;
	esac],
	AC_MSG_RESULT(using default)
	conftemp="${HTMLPATH}"
	eval conftemp=\"${conftemp}\"
	eval conftemp=\"${conftemp}\"
	AC_DEFINE_UNQUOTED(HTMLPATH, "${conftemp}",
			[Default path for HTML files])
	)

AC_MSG_CHECKING(pidpath)
AC_ARG_WITH(pidpath,
AC_HELP_STRING([--with-pidpath=PATH], [path for .pid files (/var/run)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default: ${PIDPATH})
		AC_DEFINE_UNQUOTED(PIDPATH, "${PIDPATH}",
			[Path where the pid files should go])
		;;
	*)
		AC_MSG_RESULT(${withval})
		AC_DEFINE_UNQUOTED(PIDPATH, "${withval}",
			[Path where the pid files should go])
		PIDPATH="${withval}"
		;;
	esac],
	AC_MSG_RESULT(using default: ${PIDPATH})
	AC_DEFINE_UNQUOTED(PIDPATH, "${PIDPATH}",
			[Path where the pid files should go])
)

AC_MSG_CHECKING(network port number)
AC_ARG_WITH(port,
AC_HELP_STRING([--with-port=PORT], [port for network communications (3493)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default value: 3493)
		AC_DEFINE_UNQUOTED(PORT, 3493,
			[Port for network communications])
		;;
	*)
		AC_MSG_RESULT(${withval})
		AC_DEFINE_UNQUOTED(PORT, ${withval},
			[Port for network communications])
		;;
	esac],
	AC_MSG_RESULT(using default value: 3493)
	AC_DEFINE_UNQUOTED(PORT, 3493,
		[Port for network communications])
)

AC_MSG_CHECKING(user to run as)
AC_ARG_WITH(user,
AC_HELP_STRING([--with-user=username], [user for programs started as root (nobody)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default: ${RUN_AS_USER})
		AC_DEFINE_UNQUOTED(RUN_AS_USER, "${RUN_AS_USER}",
			[User to switch to if started as root])
		;;
	*)
		AC_MSG_RESULT(${withval})
		AC_DEFINE_UNQUOTED(RUN_AS_USER, "${withval}",
			[User to switch to if started as root])
		RUN_AS_USER="${withval}"
		;;
	esac],
	AC_MSG_RESULT(using default: ${RUN_AS_USER})
	AC_DEFINE_UNQUOTED(RUN_AS_USER, "${RUN_AS_USER}",
		[User to switch to if started as root])
)

AC_MSG_CHECKING(facility for syslog)
AC_ARG_WITH(logfacility,
AC_HELP_STRING([--with-logfacility=FACILITY], [facility for log messages (LOG_DAEMON)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default value: LOG_DAEMON)
		AC_DEFINE_UNQUOTED(LOG_FACILITY, LOG_DAEMON,
			[Desired syslog facility - see syslog(3)])
		;;
	*)
		AC_MSG_RESULT(${withval})
		AC_DEFINE_UNQUOTED(LOG_FACILITY, ${withval},
			[Desired syslog facility - see syslog(3)])
		;;
	esac],
	AC_MSG_RESULT(using default value: LOG_DAEMON)
	AC_DEFINE_UNQUOTED(LOG_FACILITY, LOG_DAEMON,
		[Desired syslog facility - see syslog(3)])
)

AC_MSG_CHECKING(which drivers to build)
AC_ARG_WITH(drivers,
AC_HELP_STRING([[[[--with-drivers=driver@<:@,driver...@:>@]]]], [Only use specific drivers (all)]),
[	case "${withval}" in
	yes | no)
		dnl ignore calls without any arguments
		DRIVER_BUILD_LIST="all"
		;;
	*)
		DRIVER_BUILD_LIST=`echo ${withval} | sed "s/,/ /g"`
		;;
	esac
],
[
	DRIVER_BUILD_LIST="all"
]
)
AC_MSG_RESULT(${DRIVER_BUILD_LIST})
AM_CONDITIONAL(SOME_DRIVERS, test "${DRIVER_BUILD_LIST}" != "all")

AC_MSG_CHECKING(which driver man pages to install)
if test "${DRIVER_BUILD_LIST}" = "all"; then
   DRIVER_MAN_LIST=all
else
   DRIVER_MAN_LIST=""
   for i in ${DRIVER_BUILD_LIST}; do
      if test -f ${srcdir}/man/$i.8; then
         DRIVER_MAN_LIST="${DRIVER_MAN_LIST} $i.8"
      fi
   done
fi
AC_MSG_RESULT(${DRIVER_MAN_LIST})

AC_MSG_CHECKING(whether to strip debug symbols)
AC_ARG_ENABLE(strip,
[  --enable-strip		Strip debugging symbols from binaries	    [no]],
[
	case "${withval}" in
		no)
			AC_MSG_RESULT(no)
		;;
		*)
			AC_MSG_RESULT(yes)
			CFLAGS="${CFLAGS} -s"
		;;
	esac
],
[	AC_MSG_RESULT(no)
])


AC_MSG_CHECKING(whether to enable pkg-config support)
AC_ARG_WITH(pkgconfig-dir,
AC_HELP_STRING([--with-pkgconfig-dir=PATH], [where to install pkg-config *.pc files (/usr/lib/pkgconfig)]),
[
	case "${withval}" in
		yes)
			if (test -d '/usr/lib/pkgconfig')
			then
				PKG_CFG_DIR='/usr/lib/pkgconfig'
			else
				PKG_CFG_DIR=""
			fi
		;;
		no)
			PKG_CFG_DIR=""
		;;
		*)
			PKG_CFG_DIR="${withval}"
		;;
	esac
],
[       
	if (test -d '/usr/lib/pkgconfig')
	then
		PKG_CFG_DIR='/usr/lib/pkgconfig'
	else
		PKG_CFG_DIR=""
	fi
])
if test -n "${PKG_CFG_DIR}"; then
  AC_MSG_RESULT(using ${PKG_CFG_DIR})
else
  AC_MSG_RESULT(no)
fi
AM_CONDITIONAL(WITH_PKG_CONFIG, test -n ${PKG_CFG_DIR})

dnl 'long long' check - this gets used down in snprintf.o
dnl
AC_CACHE_CHECK([for long long],nut_cv_have_longlong,[
AC_TRY_RUN([#include <stdio.h>
main() { long long x = 1000000; x *= x; exit(((x/1000000) == 1000000)? 0: 1); }],
nut_cv_have_longlong=yes,nut_cv_have_longlong=no,nut_cv_have_longlong=cross)])
if test "${nut_cv_have_longlong}" = "yes"; then
    AC_DEFINE(HAVE_LONGLONG, 1, [longlong support for snprintf])
fi

dnl expand ${sysconfdir} and write it out
conftemp="${sysconfdir}"
eval conftemp=\"${conftemp}\"
eval conftemp=\"${conftemp}\"
AC_DEFINE_UNQUOTED(CONFPATH, "${conftemp}",
			[Default path for configuration files])

dnl same for datadir
conftemp="${datadir}"
eval conftemp=\"${conftemp}\"
eval conftemp=\"${conftemp}\"
AC_DEFINE_UNQUOTED(DATADIR, "${conftemp}",
			[Default path for data files])

AC_SUBST(SSL_CFLAGS)
AC_SUBST(SSL_LDFLAGS)
AC_SUBST(LIBGD_CFLAGS)
AC_SUBST(LIBGD_LDFLAGS)
AC_SUBST(NETSNMP_CFLAGS)
AC_SUBST(NETSNMP_LDFLAGS)
AC_SUBST(LIBUSB_CFLAGS)
AC_SUBST(LIBUSB_LDFLAGS)
AC_SUBST(LIBHAL_CFLAGS)
AC_SUBST(LIBHAL_LDFLAGS)
AC_SUBST(DRIVER_BUILD_LIST)
AC_SUBST(DRIVER_MAN_LIST)
AC_SUBST(DRIVER_INSTALL_TARGET)
AC_SUBST(NETLIBS)
AC_SUBST(SERLIBS)
AC_SUBST(STATEPATH)
AC_SUBST(DRVPATH)
AC_SUBST(CGIPATH)
AC_SUBST(HTMLPATH)
AC_SUBST(RUN_AS_USER)
AC_SUBST(LINUX_HIDDEV)
AC_SUBST(SUN_LIBUSB)
AC_SUBST(WORDS_BIGENDIAN)
AC_SUBST(PKG_CFG_DIR)

AC_OUTPUT([
 clients/Makefile
 common/Makefile
 conf/Makefile
 data/html/header.html
 data/html/Makefile
 data/Makefile
 docs/Makefile
 drivers/Makefile
 include/Makefile
 lib/libupsclient-config
 lib/libupsclient.pc
 lib/Makefile
 m4/Makefile
 man/Makefile
 packaging/Makefile
 packaging/debian/Makefile
 packaging/mandriva/Makefile
 packaging/RedHat/Makefile
 scripts/hotplug/libhidups
 scripts/hotplug-ng/nut-usbups.hotplug
 scripts/hotplug-ng/nut-usbups.rules
 scripts/Makefile
 server/Makefile
 Makefile
])

NUT_PRINT_FEATURE_REPORT
